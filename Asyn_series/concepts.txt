For production the code may differ 
there is a kadal of api 
use the api for make use  of api 

For Development Use the https://api-ninjas.com/ 

for getting information on that we can get the any data reference 

Remember that the js is Both interperter and complier language 

in chromme that use the V8 engine 
The Notes of the Lecture Taken by Shankaranarayanan 

API used for the below 

https://jsonplaceholder.typicode.com/posts
https://official-joke-api.appspot.com/jokes/random"
https://jsonplaceholder.typicode.com/users
 
js never wait for anyone executes line by line 

but by using the async js but execute the 3rd line before 2nd line by the setTimeout()


while using the setTimeout() it will go out from the callStack to browser side 
 
in browserside there is 
DOM
AJAX
setImmediate
setTimeout
setInterval

console.log('hi');
setTimeout(()=>console.log('pola'),2000);//this will print after 2 sec
console.log('vala')


by using the browser side the above code act as like asyn js

main concepts of asyn js

callback(not used mostly)
await
asyn
promise

oru fun la iinoru fun call pannuna atha atha callback


to drawback it the promise came 


Promises:

has 3 states -Pending,Fulfilled,rejected
"pending"	undefined
"fulfilled"	a result value
"rejected"	an error object
syntax:

const myPromise = new Promise((resolve,reject)=>{
const error =true;
if(!error)
{
resolve("yes it correct")
else
{
reject("no it is not correct")
}
})
console.log(myPromise)//it return with status and value


  
myPromise //to get only value
.then(val=>{
return val +'hence msg"//ithu la console pota nxt wrk aagathu 
})
.then(varname=>
console.log(varname))
.catch(err=>
{
console.log(err)
})//if the condition is false then it directly goes to the catch stamt doesnt read any .then stamt


the above are reference of the fullfilled and rejected 

Pending :

const users = fetch("https://jsonplaceholder.typicode.com/users")
    console.log(users)

o/p:Promise { <pending> }


y pending came we dosn't use the .then basically the .then is used to get the value 

const users = fetch("https://jsonplaceholder.typicode.com/users")
.then(users => {
    return users.json()}
).then(users => {
    console.log(users)
})  


o/p:
Promise { <pending> }//it comes becoz js never wait   
[
  {
    id: 1,
    name: 'Leanne Graham',
    username: 'Bret',
    email: 'Sincere@april.biz',
    address: {
      street: 'Kulas Light',
      suite: 'Apt. 556',
      city: 'Gwenborough',
      zipcode: '92998-3874',
      geo: [Object]
    },

//below code is for printing the data in one by one array formate which is done by using the foreach loop

const users = fetch("https://jsonplaceholder.typicode.com/users")
.then(users => {
    return users.json()}
).then(users => {
    users.forEach(user => {
        console.log(user.name)
    })
    console.log(users)
}) 

//basically the promise is used instead of usinth the callback becaz the callback is method of doing the same but code may looks ugly thats way promise came but here also same occur when more .then used on it so to recover the prblm  in 2017 the concept of the Asyn/await came and keep in mind if a function doesn't have name it is called as anonyms function

Asyn/Await :

in above we had seen in the o/p of promise<pending>
 which says that it reads the next line before the fetch api does so thats way not to excute the next line to execute only the fetch line we use the await concept

await says that done and only goes to nxt line and main thing is when we using the awit it should be inside the asyn function 

const users =async()=>{
    const user1=await fetch("https://jsonplaceholder.typicode.com/users")
    const user2 = await user1.json()
    console.log(user2);
    return user2;
}
users()

takes time becoz of using the await 


const userla =
{
    userlist:[]
}

const users = async()=>{
    const response=await fetch("https://jsonplaceholder.typicode.com/users")
    const user=await response.json()
    return user;
    // console.log(user);
}
const users2 = async()=>{
    const data = await users()// if no await the promise pending
    userla.userlist=data//ipo atha arraya la 10 obj create aagirukum
    // return data
    console.log(data);
    //console.log(userla);
}
users2();

in above code we getting the userla ku arrays 10 return data line ku keela irukura console.log kudukulana 

we can also stop using the await  too more we can

const userla =
{
    userlist:[]
}

const users = async()=>{
    const response=await fetch("https://jsonplaceholder.typicode.com/users")
    const user=await response.json()
   user2(
    return user;
    // console.log(user);
}
const users2 = (data)=>{
    //const data = await users()
    userla.userlist=data//ipo atha arraya la 10 obj create aagirukum
    // return data
    // console.log(data);
    console.log(userla)//line clear to see the 
}
users2()


in the above method the we use to data by reducing the  await to make much fast   

 










